/* automatically generated by rust-bindgen 0.71.1 */

pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint_least16_t = __uint16_t;
pub type char16_t = __uint_least16_t;
#[repr(C)]
pub struct _cef_string_utf16_t {
    pub str_: *mut char16_t,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str_: *mut char16_t)>,
}
pub type cef_string_utf16_t = _cef_string_utf16_t;
pub type cef_string_userfree_utf16_t = *mut cef_string_utf16_t;
unsafe extern "C" {
    pub fn cef_string_userfree_utf16_free(str_: cef_string_userfree_utf16_t);
}
pub type cef_string_userfree_t = cef_string_userfree_utf16_t;
pub type cef_string_t = cef_string_utf16_t;
#[repr(C)]
pub struct _cef_string_list_t {
    _unused: [u8; 0],
}
pub type cef_string_list_t = *mut _cef_string_list_t;
#[repr(C)]
pub struct _cef_string_multimap_t {
    _unused: [u8; 0],
}
pub type cef_string_multimap_t = *mut _cef_string_multimap_t;
#[repr(C)]
pub struct _cef_basetime_t {
    pub val: i64,
}
pub type cef_basetime_t = _cef_basetime_t;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_COOKIES: cef_content_setting_types_t = 0;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_IMAGES: cef_content_setting_types_t = 1;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_JAVASCRIPT: cef_content_setting_types_t = 2;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_POPUPS: cef_content_setting_types_t = 3;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_GEOLOCATION: cef_content_setting_types_t = 4;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_NOTIFICATIONS: cef_content_setting_types_t = 5;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AUTO_SELECT_CERTIFICATE: cef_content_setting_types_t = 6;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MIXEDSCRIPT: cef_content_setting_types_t = 7;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MEDIASTREAM_MIC: cef_content_setting_types_t = 8;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MEDIASTREAM_CAMERA: cef_content_setting_types_t = 9;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PROTOCOL_HANDLERS: cef_content_setting_types_t = 10;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DEPRECATED_PPAPI_BROKER: cef_content_setting_types_t =
    11;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AUTOMATIC_DOWNLOADS: cef_content_setting_types_t = 12;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MIDI_SYSEX: cef_content_setting_types_t = 13;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SSL_CERT_DECISIONS: cef_content_setting_types_t = 14;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PROTECTED_MEDIA_IDENTIFIER: cef_content_setting_types_t =
    15;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_APP_BANNER: cef_content_setting_types_t = 16;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SITE_ENGAGEMENT: cef_content_setting_types_t = 17;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DURABLE_STORAGE: cef_content_setting_types_t = 18;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_USB_CHOOSER_DATA: cef_content_setting_types_t = 19;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_BLUETOOTH_GUARD: cef_content_setting_types_t = 20;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_BACKGROUND_SYNC: cef_content_setting_types_t = 21;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AUTOPLAY: cef_content_setting_types_t = 22;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_IMPORTANT_SITE_INFO: cef_content_setting_types_t = 23;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PERMISSION_AUTOBLOCKER_DATA:
    cef_content_setting_types_t = 24;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_ADS: cef_content_setting_types_t = 25;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_ADS_DATA: cef_content_setting_types_t = 26;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MIDI: cef_content_setting_types_t = 27;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PASSWORD_PROTECTION: cef_content_setting_types_t = 28;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_MEDIA_ENGAGEMENT: cef_content_setting_types_t = 29;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SOUND: cef_content_setting_types_t = 30;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_CLIENT_HINTS: cef_content_setting_types_t = 31;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SENSORS: cef_content_setting_types_t = 32;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DEPRECATED_ACCESSIBILITY_EVENTS:
    cef_content_setting_types_t = 33;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PAYMENT_HANDLER: cef_content_setting_types_t = 34;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_USB_GUARD: cef_content_setting_types_t = 35;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_BACKGROUND_FETCH: cef_content_setting_types_t = 36;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_INTENT_PICKER_DISPLAY: cef_content_setting_types_t = 37;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_IDLE_DETECTION: cef_content_setting_types_t = 38;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SERIAL_GUARD: cef_content_setting_types_t = 39;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SERIAL_CHOOSER_DATA: cef_content_setting_types_t = 40;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PERIODIC_BACKGROUND_SYNC: cef_content_setting_types_t =
    41;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_BLUETOOTH_SCANNING: cef_content_setting_types_t = 42;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_HID_GUARD: cef_content_setting_types_t = 43;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_HID_CHOOSER_DATA: cef_content_setting_types_t = 44;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_WAKE_LOCK_SCREEN: cef_content_setting_types_t = 45;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_WAKE_LOCK_SYSTEM: cef_content_setting_types_t = 46;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_LEGACY_COOKIE_ACCESS: cef_content_setting_types_t = 47;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_WRITE_GUARD: cef_content_setting_types_t =
    48;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_NFC: cef_content_setting_types_t = 49;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_BLUETOOTH_CHOOSER_DATA: cef_content_setting_types_t = 50;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_CLIPBOARD_READ_WRITE: cef_content_setting_types_t = 51;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_CLIPBOARD_SANITIZED_WRITE: cef_content_setting_types_t =
    52;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SAFE_BROWSING_URL_CHECK_DATA:
    cef_content_setting_types_t = 53;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_VR: cef_content_setting_types_t = 54;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AR: cef_content_setting_types_t = 55;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_READ_GUARD: cef_content_setting_types_t = 56;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_STORAGE_ACCESS: cef_content_setting_types_t = 57;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_CAMERA_PAN_TILT_ZOOM: cef_content_setting_types_t = 58;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_WINDOW_MANAGEMENT: cef_content_setting_types_t = 59;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_INSECURE_PRIVATE_NETWORK: cef_content_setting_types_t =
    60;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_LOCAL_FONTS: cef_content_setting_types_t = 61;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PERMISSION_AUTOREVOCATION_DATA:
    cef_content_setting_types_t = 62;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_LAST_PICKED_DIRECTORY:
    cef_content_setting_types_t = 63;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DISPLAY_CAPTURE: cef_content_setting_types_t = 64;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_ACCESS_CHOOSER_DATA:
    cef_content_setting_types_t = 65;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_SHARING: cef_content_setting_types_t =
    66;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_JAVASCRIPT_JIT: cef_content_setting_types_t = 67;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_HTTP_ALLOWED: cef_content_setting_types_t = 68;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FORMFILL_METADATA: cef_content_setting_types_t = 69;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DEPRECATED_FEDERATED_IDENTITY_ACTIVE_SESSION:
    cef_content_setting_types_t = 70;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AUTO_DARK_WEB_CONTENT: cef_content_setting_types_t = 71;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_REQUEST_DESKTOP_SITE: cef_content_setting_types_t = 72;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_API: cef_content_setting_types_t = 73;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_NOTIFICATION_INTERACTIONS: cef_content_setting_types_t =
    74;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_REDUCED_ACCEPT_LANGUAGE: cef_content_setting_types_t =
    75;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_NOTIFICATION_PERMISSION_REVIEW:
    cef_content_setting_types_t = 76;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PRIVATE_NETWORK_GUARD: cef_content_setting_types_t = 77;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_PRIVATE_NETWORK_CHOOSER_DATA:
    cef_content_setting_types_t = 78;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_IDENTITY_PROVIDER_SIGNIN_STATUS:
    cef_content_setting_types_t = 79;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_REVOKED_UNUSED_SITE_PERMISSIONS:
    cef_content_setting_types_t = 80;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_TOP_LEVEL_STORAGE_ACCESS: cef_content_setting_types_t =
    81;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_AUTO_REAUTHN_PERMISSION:
    cef_content_setting_types_t = 82;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FEDERATED_IDENTITY_IDENTITY_PROVIDER_REGISTRATION:
    cef_content_setting_types_t = 83;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_ANTI_ABUSE: cef_content_setting_types_t = 84;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_THIRD_PARTY_STORAGE_PARTITIONING:
    cef_content_setting_types_t = 85;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_HTTPS_ENFORCED: cef_content_setting_types_t = 86;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_ALL_SCREEN_CAPTURE: cef_content_setting_types_t = 87;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_COOKIE_CONTROLS_METADATA: cef_content_setting_types_t =
    88;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_TPCD_HEURISTICS_GRANTS: cef_content_setting_types_t = 89;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_TPCD_METADATA_GRANTS: cef_content_setting_types_t = 90;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_TPCD_TRIAL: cef_content_setting_types_t = 91;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_TOP_LEVEL_TPCD_TRIAL: cef_content_setting_types_t = 92;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TOP_LEVEL_TPCD_ORIGIN_TRIAL: cef_content_setting_types_t = 93;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AUTO_PICTURE_IN_PICTURE: cef_content_setting_types_t =
    94;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_ACCESS_EXTENDED_PERMISSION:
    cef_content_setting_types_t = 95;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_FILE_SYSTEM_ACCESS_RESTORE_PERMISSION:
    cef_content_setting_types_t = 96;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_CAPTURED_SURFACE_CONTROL: cef_content_setting_types_t =
    97;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SMART_CARD_GUARD: cef_content_setting_types_t = 98;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SMART_CARD_DATA: cef_content_setting_types_t = 99;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_WEB_PRINTING: cef_content_setting_types_t = 100;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_AUTOMATIC_FULLSCREEN: cef_content_setting_types_t = 101;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SUB_APP_INSTALLATION_PROMPTS:
    cef_content_setting_types_t = 102;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_SPEAKER_SELECTION: cef_content_setting_types_t = 103;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DIRECT_SOCKETS: cef_content_setting_types_t = 104;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_KEYBOARD_LOCK: cef_content_setting_types_t = 105;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_POINTER_LOCK: cef_content_setting_types_t = 106;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_REVOKED_ABUSIVE_NOTIFICATION_PERMISSIONS:
    cef_content_setting_types_t = 107;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_TRACKING_PROTECTION: cef_content_setting_types_t = 108;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DISPLAY_MEDIA_SYSTEM_AUDIO: cef_content_setting_types_t =
    109;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_JAVASCRIPT_OPTIMIZER: cef_content_setting_types_t = 110;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_STORAGE_ACCESS_HEADER_ORIGIN_TRIAL:
    cef_content_setting_types_t = 111;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_HAND_TRACKING: cef_content_setting_types_t = 112;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_WEB_APP_INSTALLATION: cef_content_setting_types_t = 113;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_DIRECT_SOCKETS_PRIVATE_NETWORK_ACCESS:
    cef_content_setting_types_t = 114;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_LEGACY_COOKIE_SCOPE: cef_content_setting_types_t = 115;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_ARE_SUSPICIOUS_NOTIFICATIONS_ALLOWLISTED_BY_USER:
    cef_content_setting_types_t = 116;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_CONTROLLED_FRAME: cef_content_setting_types_t = 117;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_REVOKED_DISRUPTIVE_NOTIFICATION_PERMISSIONS:
    cef_content_setting_types_t = 118;
pub const cef_content_setting_types_t_CEF_CONTENT_SETTING_TYPE_NUM_VALUES: cef_content_setting_types_t = 119;
pub type cef_content_setting_types_t = ::std::os::raw::c_uint;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_DEFAULT: cef_content_setting_values_t = 0;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_ALLOW: cef_content_setting_values_t = 1;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_BLOCK: cef_content_setting_values_t = 2;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_ASK: cef_content_setting_values_t = 3;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_SESSION_ONLY: cef_content_setting_values_t = 4;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_DETECT_IMPORTANT_CONTENT:
    cef_content_setting_values_t = 5;
pub const cef_content_setting_values_t_CEF_CONTENT_SETTING_VALUE_NUM_VALUES: cef_content_setting_values_t = 6;
pub type cef_content_setting_values_t = ::std::os::raw::c_uint;
pub type cef_color_t = u32;
pub const cef_cookie_priority_t_CEF_COOKIE_PRIORITY_LOW: cef_cookie_priority_t = -1;
pub const cef_cookie_priority_t_CEF_COOKIE_PRIORITY_MEDIUM: cef_cookie_priority_t = 0;
pub const cef_cookie_priority_t_CEF_COOKIE_PRIORITY_HIGH: cef_cookie_priority_t = 1;
pub type cef_cookie_priority_t = ::std::os::raw::c_int;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_UNSPECIFIED: cef_cookie_same_site_t = 0;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_NO_RESTRICTION: cef_cookie_same_site_t = 1;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_LAX_MODE: cef_cookie_same_site_t = 2;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_STRICT_MODE: cef_cookie_same_site_t = 3;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_NUM_VALUES: cef_cookie_same_site_t = 4;
pub type cef_cookie_same_site_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_cookie_t {
    pub size: usize,
    pub name: cef_string_t,
    pub value: cef_string_t,
    pub domain: cef_string_t,
    pub path: cef_string_t,
    pub secure: ::std::os::raw::c_int,
    pub httponly: ::std::os::raw::c_int,
    pub creation: cef_basetime_t,
    pub last_access: cef_basetime_t,
    pub has_expires: ::std::os::raw::c_int,
    pub expires: cef_basetime_t,
    pub same_site: cef_cookie_same_site_t,
    pub priority: cef_cookie_priority_t,
}
pub const cef_errorcode_t_ERR_NONE: cef_errorcode_t = 0;
pub const cef_errorcode_t_ERR_IO_PENDING: cef_errorcode_t = -1;
pub const cef_errorcode_t_ERR_FAILED: cef_errorcode_t = -2;
pub const cef_errorcode_t_ERR_ABORTED: cef_errorcode_t = -3;
pub const cef_errorcode_t_ERR_INVALID_ARGUMENT: cef_errorcode_t = -4;
pub const cef_errorcode_t_ERR_INVALID_HANDLE: cef_errorcode_t = -5;
pub const cef_errorcode_t_ERR_FILE_NOT_FOUND: cef_errorcode_t = -6;
pub const cef_errorcode_t_ERR_TIMED_OUT: cef_errorcode_t = -7;
pub const cef_errorcode_t_ERR_FILE_TOO_BIG: cef_errorcode_t = -8;
pub const cef_errorcode_t_ERR_UNEXPECTED: cef_errorcode_t = -9;
pub const cef_errorcode_t_ERR_ACCESS_DENIED: cef_errorcode_t = -10;
pub const cef_errorcode_t_ERR_NOT_IMPLEMENTED: cef_errorcode_t = -11;
pub const cef_errorcode_t_ERR_INSUFFICIENT_RESOURCES: cef_errorcode_t = -12;
pub const cef_errorcode_t_ERR_OUT_OF_MEMORY: cef_errorcode_t = -13;
pub const cef_errorcode_t_ERR_UPLOAD_FILE_CHANGED: cef_errorcode_t = -14;
pub const cef_errorcode_t_ERR_SOCKET_NOT_CONNECTED: cef_errorcode_t = -15;
pub const cef_errorcode_t_ERR_FILE_EXISTS: cef_errorcode_t = -16;
pub const cef_errorcode_t_ERR_FILE_PATH_TOO_LONG: cef_errorcode_t = -17;
pub const cef_errorcode_t_ERR_FILE_NO_SPACE: cef_errorcode_t = -18;
pub const cef_errorcode_t_ERR_FILE_VIRUS_INFECTED: cef_errorcode_t = -19;
pub const cef_errorcode_t_ERR_BLOCKED_BY_CLIENT: cef_errorcode_t = -20;
pub const cef_errorcode_t_ERR_NETWORK_CHANGED: cef_errorcode_t = -21;
pub const cef_errorcode_t_ERR_BLOCKED_BY_ADMINISTRATOR: cef_errorcode_t = -22;
pub const cef_errorcode_t_ERR_SOCKET_IS_CONNECTED: cef_errorcode_t = -23;
pub const cef_errorcode_t_ERR_UPLOAD_STREAM_REWIND_NOT_SUPPORTED: cef_errorcode_t = -25;
pub const cef_errorcode_t_ERR_CONTEXT_SHUT_DOWN: cef_errorcode_t = -26;
pub const cef_errorcode_t_ERR_BLOCKED_BY_RESPONSE: cef_errorcode_t = -27;
pub const cef_errorcode_t_ERR_CLEARTEXT_NOT_PERMITTED: cef_errorcode_t = -29;
pub const cef_errorcode_t_ERR_BLOCKED_BY_CSP: cef_errorcode_t = -30;
pub const cef_errorcode_t_ERR_H2_OR_QUIC_REQUIRED: cef_errorcode_t = -31;
pub const cef_errorcode_t_ERR_BLOCKED_BY_ORB: cef_errorcode_t = -32;
pub const cef_errorcode_t_ERR_NETWORK_ACCESS_REVOKED: cef_errorcode_t = -33;
pub const cef_errorcode_t_ERR_BLOCKED_BY_FINGERPRINTING_PROTECTION: cef_errorcode_t = -34;
pub const cef_errorcode_t_ERR_CONNECTION_CLOSED: cef_errorcode_t = -100;
pub const cef_errorcode_t_ERR_CONNECTION_RESET: cef_errorcode_t = -101;
pub const cef_errorcode_t_ERR_CONNECTION_REFUSED: cef_errorcode_t = -102;
pub const cef_errorcode_t_ERR_CONNECTION_ABORTED: cef_errorcode_t = -103;
pub const cef_errorcode_t_ERR_CONNECTION_FAILED: cef_errorcode_t = -104;
pub const cef_errorcode_t_ERR_NAME_NOT_RESOLVED: cef_errorcode_t = -105;
pub const cef_errorcode_t_ERR_INTERNET_DISCONNECTED: cef_errorcode_t = -106;
pub const cef_errorcode_t_ERR_SSL_PROTOCOL_ERROR: cef_errorcode_t = -107;
pub const cef_errorcode_t_ERR_ADDRESS_INVALID: cef_errorcode_t = -108;
pub const cef_errorcode_t_ERR_ADDRESS_UNREACHABLE: cef_errorcode_t = -109;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_CERT_NEEDED: cef_errorcode_t = -110;
pub const cef_errorcode_t_ERR_TUNNEL_CONNECTION_FAILED: cef_errorcode_t = -111;
pub const cef_errorcode_t_ERR_NO_SSL_VERSIONS_ENABLED: cef_errorcode_t = -112;
pub const cef_errorcode_t_ERR_SSL_VERSION_OR_CIPHER_MISMATCH: cef_errorcode_t = -113;
pub const cef_errorcode_t_ERR_SSL_RENEGOTIATION_REQUESTED: cef_errorcode_t = -114;
pub const cef_errorcode_t_ERR_PROXY_AUTH_UNSUPPORTED: cef_errorcode_t = -115;
pub const cef_errorcode_t_ERR_BAD_SSL_CLIENT_AUTH_CERT: cef_errorcode_t = -117;
pub const cef_errorcode_t_ERR_CONNECTION_TIMED_OUT: cef_errorcode_t = -118;
pub const cef_errorcode_t_ERR_HOST_RESOLVER_QUEUE_TOO_LARGE: cef_errorcode_t = -119;
pub const cef_errorcode_t_ERR_SOCKS_CONNECTION_FAILED: cef_errorcode_t = -120;
pub const cef_errorcode_t_ERR_SOCKS_CONNECTION_HOST_UNREACHABLE: cef_errorcode_t = -121;
pub const cef_errorcode_t_ERR_ALPN_NEGOTIATION_FAILED: cef_errorcode_t = -122;
pub const cef_errorcode_t_ERR_SSL_NO_RENEGOTIATION: cef_errorcode_t = -123;
pub const cef_errorcode_t_ERR_WINSOCK_UNEXPECTED_WRITTEN_BYTES: cef_errorcode_t = -124;
pub const cef_errorcode_t_ERR_SSL_DECOMPRESSION_FAILURE_ALERT: cef_errorcode_t = -125;
pub const cef_errorcode_t_ERR_SSL_BAD_RECORD_MAC_ALERT: cef_errorcode_t = -126;
pub const cef_errorcode_t_ERR_PROXY_AUTH_REQUESTED: cef_errorcode_t = -127;
pub const cef_errorcode_t_ERR_PROXY_CONNECTION_FAILED: cef_errorcode_t = -130;
pub const cef_errorcode_t_ERR_MANDATORY_PROXY_CONFIGURATION_FAILED: cef_errorcode_t = -131;
pub const cef_errorcode_t_ERR_PRECONNECT_MAX_SOCKET_LIMIT: cef_errorcode_t = -133;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED: cef_errorcode_t = -134;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY: cef_errorcode_t = -135;
pub const cef_errorcode_t_ERR_PROXY_CERTIFICATE_INVALID: cef_errorcode_t = -136;
pub const cef_errorcode_t_ERR_NAME_RESOLUTION_FAILED: cef_errorcode_t = -137;
pub const cef_errorcode_t_ERR_NETWORK_ACCESS_DENIED: cef_errorcode_t = -138;
pub const cef_errorcode_t_ERR_TEMPORARILY_THROTTLED: cef_errorcode_t = -139;
pub const cef_errorcode_t_ERR_HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT: cef_errorcode_t = -140;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED: cef_errorcode_t = -141;
pub const cef_errorcode_t_ERR_MSG_TOO_BIG: cef_errorcode_t = -142;
pub const cef_errorcode_t_ERR_WS_PROTOCOL_ERROR: cef_errorcode_t = -145;
pub const cef_errorcode_t_ERR_ADDRESS_IN_USE: cef_errorcode_t = -147;
pub const cef_errorcode_t_ERR_SSL_HANDSHAKE_NOT_COMPLETED: cef_errorcode_t = -148;
pub const cef_errorcode_t_ERR_SSL_BAD_PEER_PUBLIC_KEY: cef_errorcode_t = -149;
pub const cef_errorcode_t_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN: cef_errorcode_t = -150;
pub const cef_errorcode_t_ERR_CLIENT_AUTH_CERT_TYPE_UNSUPPORTED: cef_errorcode_t = -151;
pub const cef_errorcode_t_ERR_SSL_DECRYPT_ERROR_ALERT: cef_errorcode_t = -153;
pub const cef_errorcode_t_ERR_WS_THROTTLE_QUEUE_TOO_LARGE: cef_errorcode_t = -154;
pub const cef_errorcode_t_ERR_SSL_SERVER_CERT_CHANGED: cef_errorcode_t = -156;
pub const cef_errorcode_t_ERR_SSL_UNRECOGNIZED_NAME_ALERT: cef_errorcode_t = -159;
pub const cef_errorcode_t_ERR_SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR: cef_errorcode_t = -160;
pub const cef_errorcode_t_ERR_SOCKET_SET_SEND_BUFFER_SIZE_ERROR: cef_errorcode_t = -161;
pub const cef_errorcode_t_ERR_SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE: cef_errorcode_t = -162;
pub const cef_errorcode_t_ERR_SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE: cef_errorcode_t = -163;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_CERT_BAD_FORMAT: cef_errorcode_t = -164;
pub const cef_errorcode_t_ERR_ICANN_NAME_COLLISION: cef_errorcode_t = -166;
pub const cef_errorcode_t_ERR_SSL_SERVER_CERT_BAD_FORMAT: cef_errorcode_t = -167;
pub const cef_errorcode_t_ERR_CT_STH_PARSING_FAILED: cef_errorcode_t = -168;
pub const cef_errorcode_t_ERR_CT_STH_INCOMPLETE: cef_errorcode_t = -169;
pub const cef_errorcode_t_ERR_UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH: cef_errorcode_t = -170;
pub const cef_errorcode_t_ERR_CT_CONSISTENCY_PROOF_PARSING_FAILED: cef_errorcode_t = -171;
pub const cef_errorcode_t_ERR_SSL_OBSOLETE_CIPHER: cef_errorcode_t = -172;
pub const cef_errorcode_t_ERR_WS_UPGRADE: cef_errorcode_t = -173;
pub const cef_errorcode_t_ERR_READ_IF_READY_NOT_IMPLEMENTED: cef_errorcode_t = -174;
pub const cef_errorcode_t_ERR_NO_BUFFER_SPACE: cef_errorcode_t = -176;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_NO_COMMON_ALGORITHMS: cef_errorcode_t = -177;
pub const cef_errorcode_t_ERR_EARLY_DATA_REJECTED: cef_errorcode_t = -178;
pub const cef_errorcode_t_ERR_WRONG_VERSION_ON_EARLY_DATA: cef_errorcode_t = -179;
pub const cef_errorcode_t_ERR_TLS13_DOWNGRADE_DETECTED: cef_errorcode_t = -180;
pub const cef_errorcode_t_ERR_SSL_KEY_USAGE_INCOMPATIBLE: cef_errorcode_t = -181;
pub const cef_errorcode_t_ERR_INVALID_ECH_CONFIG_LIST: cef_errorcode_t = -182;
pub const cef_errorcode_t_ERR_ECH_NOT_NEGOTIATED: cef_errorcode_t = -183;
pub const cef_errorcode_t_ERR_ECH_FALLBACK_CERTIFICATE_INVALID: cef_errorcode_t = -184;
pub const cef_errorcode_t_ERR_CERT_COMMON_NAME_INVALID: cef_errorcode_t = -200;
pub const cef_errorcode_t_ERR_CERT_DATE_INVALID: cef_errorcode_t = -201;
pub const cef_errorcode_t_ERR_CERT_AUTHORITY_INVALID: cef_errorcode_t = -202;
pub const cef_errorcode_t_ERR_CERT_CONTAINS_ERRORS: cef_errorcode_t = -203;
pub const cef_errorcode_t_ERR_CERT_NO_REVOCATION_MECHANISM: cef_errorcode_t = -204;
pub const cef_errorcode_t_ERR_CERT_UNABLE_TO_CHECK_REVOCATION: cef_errorcode_t = -205;
pub const cef_errorcode_t_ERR_CERT_REVOKED: cef_errorcode_t = -206;
pub const cef_errorcode_t_ERR_CERT_INVALID: cef_errorcode_t = -207;
pub const cef_errorcode_t_ERR_CERT_WEAK_SIGNATURE_ALGORITHM: cef_errorcode_t = -208;
pub const cef_errorcode_t_ERR_CERT_NON_UNIQUE_NAME: cef_errorcode_t = -210;
pub const cef_errorcode_t_ERR_CERT_WEAK_KEY: cef_errorcode_t = -211;
pub const cef_errorcode_t_ERR_CERT_NAME_CONSTRAINT_VIOLATION: cef_errorcode_t = -212;
pub const cef_errorcode_t_ERR_CERT_VALIDITY_TOO_LONG: cef_errorcode_t = -213;
pub const cef_errorcode_t_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED: cef_errorcode_t = -214;
pub const cef_errorcode_t_ERR_CERT_SYMANTEC_LEGACY: cef_errorcode_t = -215;
pub const cef_errorcode_t_ERR_CERT_KNOWN_INTERCEPTION_BLOCKED: cef_errorcode_t = -217;
pub const cef_errorcode_t_ERR_CERT_SELF_SIGNED_LOCAL_NETWORK: cef_errorcode_t = -219;
pub const cef_errorcode_t_ERR_CERT_END: cef_errorcode_t = -220;
pub const cef_errorcode_t_ERR_INVALID_URL: cef_errorcode_t = -300;
pub const cef_errorcode_t_ERR_DISALLOWED_URL_SCHEME: cef_errorcode_t = -301;
pub const cef_errorcode_t_ERR_UNKNOWN_URL_SCHEME: cef_errorcode_t = -302;
pub const cef_errorcode_t_ERR_INVALID_REDIRECT: cef_errorcode_t = -303;
pub const cef_errorcode_t_ERR_TOO_MANY_REDIRECTS: cef_errorcode_t = -310;
pub const cef_errorcode_t_ERR_UNSAFE_REDIRECT: cef_errorcode_t = -311;
pub const cef_errorcode_t_ERR_UNSAFE_PORT: cef_errorcode_t = -312;
pub const cef_errorcode_t_ERR_INVALID_RESPONSE: cef_errorcode_t = -320;
pub const cef_errorcode_t_ERR_INVALID_CHUNKED_ENCODING: cef_errorcode_t = -321;
pub const cef_errorcode_t_ERR_METHOD_NOT_SUPPORTED: cef_errorcode_t = -322;
pub const cef_errorcode_t_ERR_UNEXPECTED_PROXY_AUTH: cef_errorcode_t = -323;
pub const cef_errorcode_t_ERR_EMPTY_RESPONSE: cef_errorcode_t = -324;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_TOO_BIG: cef_errorcode_t = -325;
pub const cef_errorcode_t_ERR_PAC_SCRIPT_FAILED: cef_errorcode_t = -327;
pub const cef_errorcode_t_ERR_REQUEST_RANGE_NOT_SATISFIABLE: cef_errorcode_t = -328;
pub const cef_errorcode_t_ERR_MALFORMED_IDENTITY: cef_errorcode_t = -329;
pub const cef_errorcode_t_ERR_CONTENT_DECODING_FAILED: cef_errorcode_t = -330;
pub const cef_errorcode_t_ERR_NETWORK_IO_SUSPENDED: cef_errorcode_t = -331;
pub const cef_errorcode_t_ERR_SYN_REPLY_NOT_RECEIVED: cef_errorcode_t = -332;
pub const cef_errorcode_t_ERR_ENCODING_CONVERSION_FAILED: cef_errorcode_t = -333;
pub const cef_errorcode_t_ERR_UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT: cef_errorcode_t = -334;
pub const cef_errorcode_t_ERR_NO_SUPPORTED_PROXIES: cef_errorcode_t = -336;
pub const cef_errorcode_t_ERR_HTTP2_PROTOCOL_ERROR: cef_errorcode_t = -337;
pub const cef_errorcode_t_ERR_INVALID_AUTH_CREDENTIALS: cef_errorcode_t = -338;
pub const cef_errorcode_t_ERR_UNSUPPORTED_AUTH_SCHEME: cef_errorcode_t = -339;
pub const cef_errorcode_t_ERR_ENCODING_DETECTION_FAILED: cef_errorcode_t = -340;
pub const cef_errorcode_t_ERR_MISSING_AUTH_CREDENTIALS: cef_errorcode_t = -341;
pub const cef_errorcode_t_ERR_UNEXPECTED_SECURITY_LIBRARY_STATUS: cef_errorcode_t = -342;
pub const cef_errorcode_t_ERR_MISCONFIGURED_AUTH_ENVIRONMENT: cef_errorcode_t = -343;
pub const cef_errorcode_t_ERR_UNDOCUMENTED_SECURITY_LIBRARY_STATUS: cef_errorcode_t = -344;
pub const cef_errorcode_t_ERR_RESPONSE_BODY_TOO_BIG_TO_DRAIN: cef_errorcode_t = -345;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH: cef_errorcode_t = -346;
pub const cef_errorcode_t_ERR_INCOMPLETE_HTTP2_HEADERS: cef_errorcode_t = -347;
pub const cef_errorcode_t_ERR_PAC_NOT_IN_DHCP: cef_errorcode_t = -348;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION: cef_errorcode_t = -349;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_MULTIPLE_LOCATION: cef_errorcode_t = -350;
pub const cef_errorcode_t_ERR_HTTP2_SERVER_REFUSED_STREAM: cef_errorcode_t = -351;
pub const cef_errorcode_t_ERR_HTTP2_PING_FAILED: cef_errorcode_t = -352;
pub const cef_errorcode_t_ERR_CONTENT_LENGTH_MISMATCH: cef_errorcode_t = -354;
pub const cef_errorcode_t_ERR_INCOMPLETE_CHUNKED_ENCODING: cef_errorcode_t = -355;
pub const cef_errorcode_t_ERR_QUIC_PROTOCOL_ERROR: cef_errorcode_t = -356;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_TRUNCATED: cef_errorcode_t = -357;
pub const cef_errorcode_t_ERR_QUIC_HANDSHAKE_FAILED: cef_errorcode_t = -358;
pub const cef_errorcode_t_ERR_HTTP2_INADEQUATE_TRANSPORT_SECURITY: cef_errorcode_t = -360;
pub const cef_errorcode_t_ERR_HTTP2_FLOW_CONTROL_ERROR: cef_errorcode_t = -361;
pub const cef_errorcode_t_ERR_HTTP2_FRAME_SIZE_ERROR: cef_errorcode_t = -362;
pub const cef_errorcode_t_ERR_HTTP2_COMPRESSION_ERROR: cef_errorcode_t = -363;
pub const cef_errorcode_t_ERR_PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION: cef_errorcode_t = -364;
pub const cef_errorcode_t_ERR_HTTP_1_1_REQUIRED: cef_errorcode_t = -365;
pub const cef_errorcode_t_ERR_PROXY_HTTP_1_1_REQUIRED: cef_errorcode_t = -366;
pub const cef_errorcode_t_ERR_PAC_SCRIPT_TERMINATED: cef_errorcode_t = -367;
pub const cef_errorcode_t_ERR_PROXY_REQUIRED: cef_errorcode_t = -368;
pub const cef_errorcode_t_ERR_INVALID_HTTP_RESPONSE: cef_errorcode_t = -370;
pub const cef_errorcode_t_ERR_CONTENT_DECODING_INIT_FAILED: cef_errorcode_t = -371;
pub const cef_errorcode_t_ERR_HTTP2_RST_STREAM_NO_ERROR_RECEIVED: cef_errorcode_t = -372;
pub const cef_errorcode_t_ERR_TOO_MANY_RETRIES: cef_errorcode_t = -375;
pub const cef_errorcode_t_ERR_HTTP2_STREAM_CLOSED: cef_errorcode_t = -376;
pub const cef_errorcode_t_ERR_HTTP_RESPONSE_CODE_FAILURE: cef_errorcode_t = -379;
pub const cef_errorcode_t_ERR_QUIC_CERT_ROOT_NOT_KNOWN: cef_errorcode_t = -380;
pub const cef_errorcode_t_ERR_QUIC_GOAWAY_REQUEST_CAN_BE_RETRIED: cef_errorcode_t = -381;
pub const cef_errorcode_t_ERR_TOO_MANY_ACCEPT_CH_RESTARTS: cef_errorcode_t = -382;
pub const cef_errorcode_t_ERR_INCONSISTENT_IP_ADDRESS_SPACE: cef_errorcode_t = -383;
pub const cef_errorcode_t_ERR_CACHED_IP_ADDRESS_SPACE_BLOCKED_BY_PRIVATE_NETWORK_ACCESS_POLICY: cef_errorcode_t = -384;
pub const cef_errorcode_t_ERR_BLOCKED_BY_PRIVATE_NETWORK_ACCESS_CHECKS: cef_errorcode_t = -385;
pub const cef_errorcode_t_ERR_ZSTD_WINDOW_SIZE_TOO_BIG: cef_errorcode_t = -386;
pub const cef_errorcode_t_ERR_DICTIONARY_LOAD_FAILED: cef_errorcode_t = -387;
pub const cef_errorcode_t_ERR_UNEXPECTED_CONTENT_DICTIONARY_HEADER: cef_errorcode_t = -388;
pub const cef_errorcode_t_ERR_CACHE_MISS: cef_errorcode_t = -400;
pub const cef_errorcode_t_ERR_CACHE_READ_FAILURE: cef_errorcode_t = -401;
pub const cef_errorcode_t_ERR_CACHE_WRITE_FAILURE: cef_errorcode_t = -402;
pub const cef_errorcode_t_ERR_CACHE_OPERATION_NOT_SUPPORTED: cef_errorcode_t = -403;
pub const cef_errorcode_t_ERR_CACHE_OPEN_FAILURE: cef_errorcode_t = -404;
pub const cef_errorcode_t_ERR_CACHE_CREATE_FAILURE: cef_errorcode_t = -405;
pub const cef_errorcode_t_ERR_CACHE_RACE: cef_errorcode_t = -406;
pub const cef_errorcode_t_ERR_CACHE_CHECKSUM_READ_FAILURE: cef_errorcode_t = -407;
pub const cef_errorcode_t_ERR_CACHE_CHECKSUM_MISMATCH: cef_errorcode_t = -408;
pub const cef_errorcode_t_ERR_CACHE_LOCK_TIMEOUT: cef_errorcode_t = -409;
pub const cef_errorcode_t_ERR_CACHE_AUTH_FAILURE_AFTER_READ: cef_errorcode_t = -410;
pub const cef_errorcode_t_ERR_CACHE_ENTRY_NOT_SUITABLE: cef_errorcode_t = -411;
pub const cef_errorcode_t_ERR_CACHE_DOOM_FAILURE: cef_errorcode_t = -412;
pub const cef_errorcode_t_ERR_CACHE_OPEN_OR_CREATE_FAILURE: cef_errorcode_t = -413;
pub const cef_errorcode_t_ERR_INSECURE_RESPONSE: cef_errorcode_t = -501;
pub const cef_errorcode_t_ERR_NO_PRIVATE_KEY_FOR_CERT: cef_errorcode_t = -502;
pub const cef_errorcode_t_ERR_ADD_USER_CERT_FAILED: cef_errorcode_t = -503;
pub const cef_errorcode_t_ERR_INVALID_SIGNED_EXCHANGE: cef_errorcode_t = -504;
pub const cef_errorcode_t_ERR_INVALID_WEB_BUNDLE: cef_errorcode_t = -505;
pub const cef_errorcode_t_ERR_TRUST_TOKEN_OPERATION_FAILED: cef_errorcode_t = -506;
pub const cef_errorcode_t_ERR_TRUST_TOKEN_OPERATION_SUCCESS_WITHOUT_SENDING_REQUEST: cef_errorcode_t = -507;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_BAD_PASSWORD: cef_errorcode_t = -701;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_FAILED: cef_errorcode_t = -702;
pub const cef_errorcode_t_ERR_IMPORT_CA_CERT_NOT_CA: cef_errorcode_t = -703;
pub const cef_errorcode_t_ERR_IMPORT_CERT_ALREADY_EXISTS: cef_errorcode_t = -704;
pub const cef_errorcode_t_ERR_IMPORT_CA_CERT_FAILED: cef_errorcode_t = -705;
pub const cef_errorcode_t_ERR_IMPORT_SERVER_CERT_FAILED: cef_errorcode_t = -706;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_INVALID_MAC: cef_errorcode_t = -707;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_INVALID_FILE: cef_errorcode_t = -708;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_UNSUPPORTED: cef_errorcode_t = -709;
pub const cef_errorcode_t_ERR_KEY_GENERATION_FAILED: cef_errorcode_t = -710;
pub const cef_errorcode_t_ERR_PRIVATE_KEY_EXPORT_FAILED: cef_errorcode_t = -712;
pub const cef_errorcode_t_ERR_SELF_SIGNED_CERT_GENERATION_FAILED: cef_errorcode_t = -713;
pub const cef_errorcode_t_ERR_CERT_DATABASE_CHANGED: cef_errorcode_t = -714;
pub const cef_errorcode_t_ERR_CERT_VERIFIER_CHANGED: cef_errorcode_t = -716;
pub const cef_errorcode_t_ERR_DNS_MALFORMED_RESPONSE: cef_errorcode_t = -800;
pub const cef_errorcode_t_ERR_DNS_SERVER_REQUIRES_TCP: cef_errorcode_t = -801;
pub const cef_errorcode_t_ERR_DNS_SERVER_FAILED: cef_errorcode_t = -802;
pub const cef_errorcode_t_ERR_DNS_TIMED_OUT: cef_errorcode_t = -803;
pub const cef_errorcode_t_ERR_DNS_CACHE_MISS: cef_errorcode_t = -804;
pub const cef_errorcode_t_ERR_DNS_SEARCH_EMPTY: cef_errorcode_t = -805;
pub const cef_errorcode_t_ERR_DNS_SORT_ERROR: cef_errorcode_t = -806;
pub const cef_errorcode_t_ERR_DNS_SECURE_RESOLVER_HOSTNAME_RESOLUTION_FAILED: cef_errorcode_t = -808;
pub const cef_errorcode_t_ERR_DNS_NAME_HTTPS_ONLY: cef_errorcode_t = -809;
pub const cef_errorcode_t_ERR_DNS_REQUEST_CANCELLED: cef_errorcode_t = -810;
pub const cef_errorcode_t_ERR_DNS_NO_MATCHING_SUPPORTED_ALPN: cef_errorcode_t = -811;
pub const cef_errorcode_t_ERR_DNS_SECURE_PROBE_RECORD_INVALID: cef_errorcode_t = -814;
pub type cef_errorcode_t = ::std::os::raw::c_int;
pub const cef_postdataelement_type_t_PDE_TYPE_EMPTY: cef_postdataelement_type_t = 0;
pub const cef_postdataelement_type_t_PDE_TYPE_BYTES: cef_postdataelement_type_t = 1;
pub const cef_postdataelement_type_t_PDE_TYPE_FILE: cef_postdataelement_type_t = 2;
pub const cef_postdataelement_type_t_PDF_TYPE_NUM_VALUES: cef_postdataelement_type_t = 3;
pub type cef_postdataelement_type_t = ::std::os::raw::c_uint;
pub const cef_resource_type_t_RT_MAIN_FRAME: cef_resource_type_t = 0;
pub const cef_resource_type_t_RT_SUB_FRAME: cef_resource_type_t = 1;
pub const cef_resource_type_t_RT_STYLESHEET: cef_resource_type_t = 2;
pub const cef_resource_type_t_RT_SCRIPT: cef_resource_type_t = 3;
pub const cef_resource_type_t_RT_IMAGE: cef_resource_type_t = 4;
pub const cef_resource_type_t_RT_FONT_RESOURCE: cef_resource_type_t = 5;
pub const cef_resource_type_t_RT_SUB_RESOURCE: cef_resource_type_t = 6;
pub const cef_resource_type_t_RT_OBJECT: cef_resource_type_t = 7;
pub const cef_resource_type_t_RT_MEDIA: cef_resource_type_t = 8;
pub const cef_resource_type_t_RT_WORKER: cef_resource_type_t = 9;
pub const cef_resource_type_t_RT_SHARED_WORKER: cef_resource_type_t = 10;
pub const cef_resource_type_t_RT_PREFETCH: cef_resource_type_t = 11;
pub const cef_resource_type_t_RT_FAVICON: cef_resource_type_t = 12;
pub const cef_resource_type_t_RT_XHR: cef_resource_type_t = 13;
pub const cef_resource_type_t_RT_PING: cef_resource_type_t = 14;
pub const cef_resource_type_t_RT_SERVICE_WORKER: cef_resource_type_t = 15;
pub const cef_resource_type_t_RT_CSP_REPORT: cef_resource_type_t = 16;
pub const cef_resource_type_t_RT_PLUGIN_RESOURCE: cef_resource_type_t = 17;
pub const cef_resource_type_t_RT_NAVIGATION_PRELOAD_MAIN_FRAME: cef_resource_type_t = 19;
pub const cef_resource_type_t_RT_NAVIGATION_PRELOAD_SUB_FRAME: cef_resource_type_t = 20;
pub const cef_resource_type_t_RT_NUM_VALUES: cef_resource_type_t = 21;
pub type cef_resource_type_t = ::std::os::raw::c_uint;
pub const cef_transition_type_t_TT_LINK: cef_transition_type_t = 0;
pub const cef_transition_type_t_TT_EXPLICIT: cef_transition_type_t = 1;
pub const cef_transition_type_t_TT_AUTO_BOOKMARK: cef_transition_type_t = 2;
pub const cef_transition_type_t_TT_AUTO_SUBFRAME: cef_transition_type_t = 3;
pub const cef_transition_type_t_TT_MANUAL_SUBFRAME: cef_transition_type_t = 4;
pub const cef_transition_type_t_TT_GENERATED: cef_transition_type_t = 5;
pub const cef_transition_type_t_TT_AUTO_TOPLEVEL: cef_transition_type_t = 6;
pub const cef_transition_type_t_TT_FORM_SUBMIT: cef_transition_type_t = 7;
pub const cef_transition_type_t_TT_RELOAD: cef_transition_type_t = 8;
pub const cef_transition_type_t_TT_KEYWORD: cef_transition_type_t = 9;
pub const cef_transition_type_t_TT_KEYWORD_GENERATED: cef_transition_type_t = 10;
pub const cef_transition_type_t_TT_NUM_VALUES: cef_transition_type_t = 11;
pub const cef_transition_type_t_TT_SOURCE_MASK: cef_transition_type_t = 255;
pub const cef_transition_type_t_TT_BLOCKED_FLAG: cef_transition_type_t = 8388608;
pub const cef_transition_type_t_TT_FORWARD_BACK_FLAG: cef_transition_type_t = 16777216;
pub const cef_transition_type_t_TT_DIRECT_LOAD_FLAG: cef_transition_type_t = 33554432;
pub const cef_transition_type_t_TT_HOME_PAGE_FLAG: cef_transition_type_t = 67108864;
pub const cef_transition_type_t_TT_FROM_API_FLAG: cef_transition_type_t = 134217728;
pub const cef_transition_type_t_TT_CHAIN_START_FLAG: cef_transition_type_t = 268435456;
pub const cef_transition_type_t_TT_CHAIN_END_FLAG: cef_transition_type_t = 536870912;
pub const cef_transition_type_t_TT_CLIENT_REDIRECT_FLAG: cef_transition_type_t = 1073741824;
pub const cef_transition_type_t_TT_SERVER_REDIRECT_FLAG: cef_transition_type_t = 2147483648;
pub const cef_transition_type_t_TT_IS_REDIRECT_MASK: cef_transition_type_t = 3221225472;
pub const cef_transition_type_t_TT_QUALIFIER_MASK: cef_transition_type_t = 4294967040;
pub type cef_transition_type_t = ::std::os::raw::c_uint;
pub const cef_urlrequest_status_t_UR_UNKNOWN: cef_urlrequest_status_t = 0;
pub const cef_urlrequest_status_t_UR_SUCCESS: cef_urlrequest_status_t = 1;
pub const cef_urlrequest_status_t_UR_IO_PENDING: cef_urlrequest_status_t = 2;
pub const cef_urlrequest_status_t_UR_CANCELED: cef_urlrequest_status_t = 3;
pub const cef_urlrequest_status_t_UR_FAILED: cef_urlrequest_status_t = 4;
pub const cef_urlrequest_status_t_UR_NUM_VALUES: cef_urlrequest_status_t = 5;
pub type cef_urlrequest_status_t = ::std::os::raw::c_uint;
pub const cef_value_type_t_VTYPE_INVALID: cef_value_type_t = 0;
pub const cef_value_type_t_VTYPE_NULL: cef_value_type_t = 1;
pub const cef_value_type_t_VTYPE_BOOL: cef_value_type_t = 2;
pub const cef_value_type_t_VTYPE_INT: cef_value_type_t = 3;
pub const cef_value_type_t_VTYPE_DOUBLE: cef_value_type_t = 4;
pub const cef_value_type_t_VTYPE_STRING: cef_value_type_t = 5;
pub const cef_value_type_t_VTYPE_BINARY: cef_value_type_t = 6;
pub const cef_value_type_t_VTYPE_DICTIONARY: cef_value_type_t = 7;
pub const cef_value_type_t_VTYPE_LIST: cef_value_type_t = 8;
pub const cef_value_type_t_VTYPE_NUM_VALUES: cef_value_type_t = 9;
pub type cef_value_type_t = ::std::os::raw::c_uint;
pub const cef_referrer_policy_t_REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE:
    cef_referrer_policy_t = 0;
pub const cef_referrer_policy_t_REFERRER_POLICY_DEFAULT: cef_referrer_policy_t = 0;
pub const cef_referrer_policy_t_REFERRER_POLICY_REDUCE_REFERRER_GRANULARITY_ON_TRANSITION_CROSS_ORIGIN:
    cef_referrer_policy_t = 1;
pub const cef_referrer_policy_t_REFERRER_POLICY_ORIGIN_ONLY_ON_TRANSITION_CROSS_ORIGIN: cef_referrer_policy_t = 2;
pub const cef_referrer_policy_t_REFERRER_POLICY_NEVER_CLEAR_REFERRER: cef_referrer_policy_t = 3;
pub const cef_referrer_policy_t_REFERRER_POLICY_ORIGIN: cef_referrer_policy_t = 4;
pub const cef_referrer_policy_t_REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_CROSS_ORIGIN: cef_referrer_policy_t = 5;
pub const cef_referrer_policy_t_REFERRER_POLICY_ORIGIN_CLEAR_ON_TRANSITION_FROM_SECURE_TO_INSECURE:
    cef_referrer_policy_t = 6;
pub const cef_referrer_policy_t_REFERRER_POLICY_NO_REFERRER: cef_referrer_policy_t = 7;
pub const cef_referrer_policy_t_REFERRER_POLICY_NUM_VALUES: cef_referrer_policy_t = 8;
pub type cef_referrer_policy_t = ::std::os::raw::c_uint;
pub const cef_media_route_create_result_t_CEF_MRCR_UNKNOWN_ERROR: cef_media_route_create_result_t = 0;
pub const cef_media_route_create_result_t_CEF_MRCR_OK: cef_media_route_create_result_t = 1;
pub const cef_media_route_create_result_t_CEF_MRCR_TIMED_OUT: cef_media_route_create_result_t = 2;
pub const cef_media_route_create_result_t_CEF_MRCR_ROUTE_NOT_FOUND: cef_media_route_create_result_t = 3;
pub const cef_media_route_create_result_t_CEF_MRCR_SINK_NOT_FOUND: cef_media_route_create_result_t = 4;
pub const cef_media_route_create_result_t_CEF_MRCR_INVALID_ORIGIN: cef_media_route_create_result_t = 5;
pub const cef_media_route_create_result_t_CEF_MRCR_OFF_THE_RECORD_MISMATCH_DEPRECATED: cef_media_route_create_result_t =
    6;
pub const cef_media_route_create_result_t_CEF_MRCR_NO_SUPPORTED_PROVIDER: cef_media_route_create_result_t = 7;
pub const cef_media_route_create_result_t_CEF_MRCR_CANCELLED: cef_media_route_create_result_t = 8;
pub const cef_media_route_create_result_t_CEF_MRCR_ROUTE_ALREADY_EXISTS: cef_media_route_create_result_t = 9;
pub const cef_media_route_create_result_t_CEF_MRCR_DESKTOP_PICKER_FAILED: cef_media_route_create_result_t = 10;
pub const cef_media_route_create_result_t_CEF_MRCR_ROUTE_ALREADY_TERMINATED: cef_media_route_create_result_t = 11;
pub const cef_media_route_create_result_t_CEF_MRCR_REDUNDANT_REQUEST: cef_media_route_create_result_t = 12;
pub const cef_media_route_create_result_t_CEF_MRCR_USER_NOT_ALLOWED: cef_media_route_create_result_t = 13;
pub const cef_media_route_create_result_t_CEF_MRCR_NOTIFICATION_DISABLED: cef_media_route_create_result_t = 14;
pub const cef_media_route_create_result_t_CEF_MRCR_NUM_VALUES: cef_media_route_create_result_t = 15;
pub type cef_media_route_create_result_t = ::std::os::raw::c_uint;
pub const cef_media_route_connection_state_t_CEF_MRCS_UNKNOWN: cef_media_route_connection_state_t = -1;
pub const cef_media_route_connection_state_t_CEF_MRCS_CONNECTING: cef_media_route_connection_state_t = 0;
pub const cef_media_route_connection_state_t_CEF_MRCS_CONNECTED: cef_media_route_connection_state_t = 1;
pub const cef_media_route_connection_state_t_CEF_MRCS_CLOSED: cef_media_route_connection_state_t = 2;
pub const cef_media_route_connection_state_t_CEF_MRCS_TERMINATED: cef_media_route_connection_state_t = 3;
pub const cef_media_route_connection_state_t_CEF_MRCS_NUM_VALUES: cef_media_route_connection_state_t = 4;
pub type cef_media_route_connection_state_t = ::std::os::raw::c_int;
pub const cef_media_sink_icon_type_t_CEF_MSIT_CAST: cef_media_sink_icon_type_t = 0;
pub const cef_media_sink_icon_type_t_CEF_MSIT_CAST_AUDIO_GROUP: cef_media_sink_icon_type_t = 1;
pub const cef_media_sink_icon_type_t_CEF_MSIT_CAST_AUDIO: cef_media_sink_icon_type_t = 2;
pub const cef_media_sink_icon_type_t_CEF_MSIT_MEETING: cef_media_sink_icon_type_t = 3;
pub const cef_media_sink_icon_type_t_CEF_MSIT_HANGOUT: cef_media_sink_icon_type_t = 4;
pub const cef_media_sink_icon_type_t_CEF_MSIT_EDUCATION: cef_media_sink_icon_type_t = 5;
pub const cef_media_sink_icon_type_t_CEF_MSIT_WIRED_DISPLAY: cef_media_sink_icon_type_t = 6;
pub const cef_media_sink_icon_type_t_CEF_MSIT_GENERIC: cef_media_sink_icon_type_t = 7;
pub const cef_media_sink_icon_type_t_CEF_MSIT_NUM_VALUES: cef_media_sink_icon_type_t = 8;
pub type cef_media_sink_icon_type_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_media_sink_device_info_t {
    pub size: usize,
    pub ip_address: cef_string_t,
    pub port: ::std::os::raw::c_int,
    pub model_name: cef_string_t,
}
pub const cef_color_variant_t_CEF_COLOR_VARIANT_SYSTEM: cef_color_variant_t = 0;
pub const cef_color_variant_t_CEF_COLOR_VARIANT_LIGHT: cef_color_variant_t = 1;
pub const cef_color_variant_t_CEF_COLOR_VARIANT_DARK: cef_color_variant_t = 2;
pub const cef_color_variant_t_CEF_COLOR_VARIANT_TONAL_SPOT: cef_color_variant_t = 3;
pub const cef_color_variant_t_CEF_COLOR_VARIANT_NEUTRAL: cef_color_variant_t = 4;
pub const cef_color_variant_t_CEF_COLOR_VARIANT_VIBRANT: cef_color_variant_t = 5;
pub const cef_color_variant_t_CEF_COLOR_VARIANT_EXPRESSIVE: cef_color_variant_t = 6;
pub const cef_color_variant_t_CEF_COLOR_VARIANT_NUM_VALUES: cef_color_variant_t = 7;
pub type cef_color_variant_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_base_ref_counted_t {
    pub size: usize,
    pub add_ref: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t)>,
    pub release:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int>,
    pub has_one_ref:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int>,
    pub has_at_least_one_ref:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int>,
}
pub type cef_base_ref_counted_t = _cef_base_ref_counted_t;
#[repr(C)]
pub struct _cef_auth_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_auth_callback_t,
            username: *const cef_string_t,
            password: *const cef_string_t,
        ),
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_auth_callback_t)>,
}
#[repr(C)]
pub struct _cef_request_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int>,
    pub get_url: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t>,
    pub set_url: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t)>,
    pub get_method: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t>,
    pub set_method:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, method: *const cef_string_t)>,
    pub set_referrer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            referrer_url: *const cef_string_t,
            policy: cef_referrer_policy_t,
        ),
    >,
    pub get_referrer_url:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t>,
    pub get_referrer_policy:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_referrer_policy_t>,
    pub get_post_data: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> *mut _cef_post_data_t>,
    pub set_post_data:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, postData: *mut _cef_post_data_t)>,
    pub get_header_map:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t)>,
    pub set_header_map:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t)>,
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, name: *const cef_string_t) -> cef_string_userfree_t,
    >,
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int,
        ),
    >,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            url: *const cef_string_t,
            method: *const cef_string_t,
            postData: *mut _cef_post_data_t,
            headerMap: cef_string_multimap_t,
        ),
    >,
    pub get_flags: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int>,
    pub set_flags:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, flags: ::std::os::raw::c_int)>,
    pub get_first_party_for_cookies:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t>,
    pub set_first_party_for_cookies:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t)>,
    pub get_resource_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_resource_type_t>,
    pub get_transition_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_transition_type_t>,
    pub get_identifier: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> u64>,
}
#[repr(C)]
pub struct _cef_post_data_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int>,
    pub has_excluded_elements:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int>,
    pub get_element_count: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> usize>,
    pub get_elements: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            elementsCount: *mut usize,
            elements: *mut *mut _cef_post_data_element_t,
        ),
    >,
    pub remove_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_elements: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t)>,
}
#[repr(C)]
pub struct _cef_post_data_element_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> ::std::os::raw::c_int>,
    pub set_to_empty: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t)>,
    pub set_to_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t, fileName: *const cef_string_t),
    >,
    pub set_to_bytes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t, size: usize, bytes: *const ::std::os::raw::c_void),
    >,
    pub get_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_postdataelement_type_t>,
    pub get_file:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_string_userfree_t>,
    pub get_bytes_count: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> usize>,
    pub get_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *mut ::std::os::raw::c_void,
        ) -> usize,
    >,
}
#[repr(C)]
pub struct _cef_completion_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_completion_callback_t)>,
}
#[repr(C)]
pub struct _cef_cookie_manager_t {
    pub base: cef_base_ref_counted_t,
    pub visit_all_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub visit_url_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            includeHttpOnly: ::std::os::raw::c_int,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie: *const _cef_cookie_t,
            callback: *mut _cef_set_cookie_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie_name: *const cef_string_t,
            callback: *mut _cef_delete_cookies_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush_store: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            callback: *mut _cef_completion_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_cookie_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_visitor_t,
            cookie: *const _cef_cookie_t,
            count: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
            deleteCookie: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_set_cookie_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_set_cookie_callback_t, success: ::std::os::raw::c_int),
    >,
}
#[repr(C)]
pub struct _cef_delete_cookies_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_delete_cookies_callback_t, num_deleted: ::std::os::raw::c_int),
    >,
}
#[repr(C)]
pub struct _cef_registration_t {
    pub base: cef_base_ref_counted_t,
}
#[repr(C)]
pub struct _cef_media_router_t {
    pub base: cef_base_ref_counted_t,
    pub add_observer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            observer: *mut _cef_media_observer_t,
        ) -> *mut _cef_registration_t,
    >,
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_router_t, urn: *const cef_string_t) -> *mut _cef_media_source_t,
    >,
    pub notify_current_sinks: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_router_t)>,
    pub create_route: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            source: *mut _cef_media_source_t,
            sink: *mut _cef_media_sink_t,
            callback: *mut _cef_media_route_create_callback_t,
        ),
    >,
    pub notify_current_routes: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_router_t)>,
}
#[repr(C)]
pub struct _cef_media_observer_t {
    pub base: cef_base_ref_counted_t,
    pub on_sinks: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            sinksCount: usize,
            sinks: *const *mut _cef_media_sink_t,
        ),
    >,
    pub on_routes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            routesCount: usize,
            routes: *const *mut _cef_media_route_t,
        ),
    >,
    pub on_route_state_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            state: cef_media_route_connection_state_t,
        ),
    >,
    pub on_route_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ),
    >,
}
#[repr(C)]
pub struct _cef_media_route_t {
    pub base: cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> cef_string_userfree_t>,
    pub get_source:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_source_t>,
    pub get_sink: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_sink_t>,
    pub send_route_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ),
    >,
    pub terminate: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_route_t)>,
}
#[repr(C)]
pub struct _cef_media_route_create_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_media_route_create_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_route_create_callback_t,
            result: cef_media_route_create_result_t,
            error: *const cef_string_t,
            route: *mut _cef_media_route_t,
        ),
    >,
}
#[repr(C)]
pub struct _cef_media_sink_t {
    pub base: cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t>,
    pub get_name: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t>,
    pub get_icon_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_media_sink_icon_type_t>,
    pub get_device_info: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t, callback: *mut _cef_media_sink_device_info_callback_t),
    >,
    pub is_cast_sink:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int>,
    pub is_dial_sink:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int>,
    pub is_compatible_with: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t, source: *mut _cef_media_source_t) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_media_sink_device_info_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_media_sink_device_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_sink_device_info_callback_t,
            device_info: *const _cef_media_sink_device_info_t,
        ),
    >,
}
#[repr(C)]
pub struct _cef_media_source_t {
    pub base: cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> cef_string_userfree_t>,
    pub is_cast_source:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int>,
    pub is_dial_source:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int>,
}
#[repr(C)]
pub struct _cef_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub is_owned: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, that: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, that: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_value_t>,
    pub get_type: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_value_type_t>,
    pub get_bool: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub get_int: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> f64>,
    pub get_string: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_string_userfree_t>,
    pub get_binary: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_binary_value_t>,
    pub get_dictionary:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_dictionary_value_t>,
    pub get_list: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_list_value_t>,
    pub set_null: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub set_double:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t, value: f64) -> ::std::os::raw::c_int>,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_binary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int>,
    pub is_owned: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t, that: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t, that: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> *mut _cef_binary_value_t>,
    pub get_raw_data:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> *const ::std::os::raw::c_void>,
    pub get_size: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> usize>,
    pub get_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            buffer: *mut ::std::os::raw::c_void,
            buffer_size: usize,
            data_offset: usize,
        ) -> usize,
    >,
}
#[repr(C)]
pub struct _cef_dictionary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int>,
    pub is_owned:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int>,
    pub is_read_only:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            exclude_empty_children: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_size: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> usize>,
    pub clear:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int>,
    pub has_key: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, keys: cef_string_list_t) -> ::std::os::raw::c_int,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> cef_value_type_t,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> *mut _cef_value_t,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> f64,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_list_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int>,
    pub is_owned: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int>,
    pub is_read_only:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, that: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, that: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> *mut _cef_list_value_t>,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, size: usize) -> ::std::os::raw::c_int,
    >,
    pub get_size: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> usize>,
    pub clear: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int>,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_value_type_t>,
    pub get_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_value_t>,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> f64>,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize, value: f64) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_preference_observer_t {
    pub base: cef_base_ref_counted_t,
    pub on_preference_changed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_preference_observer_t, name: *const cef_string_t)>,
}
#[repr(C)]
pub struct _cef_preference_manager_t {
    pub base: cef_base_ref_counted_t,
    pub has_preference: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_preference_manager_t, name: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_preference: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_preference_manager_t, name: *const cef_string_t) -> *mut _cef_value_t,
    >,
    pub get_all_preferences: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            include_defaults: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub can_set_preference: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_preference_manager_t, name: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            name: *const cef_string_t,
            value: *mut _cef_value_t,
            error: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_preference_observer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_preference_manager_t,
            name: *const cef_string_t,
            observer: *mut _cef_preference_observer_t,
        ) -> *mut _cef_registration_t,
    >,
}
pub type cef_preference_manager_t = _cef_preference_manager_t;
#[repr(C)]
pub struct _cef_request_context_handler_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct _cef_scheme_handler_factory_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct _cef_resolve_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_resolve_completed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resolve_callback_t,
            result: cef_errorcode_t,
            resolved_ips: cef_string_list_t,
        ),
    >,
}
#[repr(C)]
pub struct _cef_setting_observer_t {
    pub base: cef_base_ref_counted_t,
    pub on_setting_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_setting_observer_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t,
        ),
    >,
}
#[repr(C)]
pub struct _cef_request_context_t {
    pub base: cef_preference_manager_t,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_sharing_with: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_global:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int>,
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> *mut _cef_request_context_handler_t,
    >,
    pub get_cache_path:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> cef_string_userfree_t>,
    pub get_cookie_manager: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ) -> *mut _cef_cookie_manager_t,
    >,
    pub register_scheme_handler_factory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            scheme_name: *const cef_string_t,
            domain_name: *const cef_string_t,
            factory: *mut _cef_scheme_handler_factory_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_scheme_handler_factories:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int>,
    pub clear_certificate_exceptions: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t, callback: *mut _cef_completion_callback_t),
    >,
    pub clear_http_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t, callback: *mut _cef_completion_callback_t),
    >,
    pub close_all_connections: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t, callback: *mut _cef_completion_callback_t),
    >,
    pub resolve_host: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            origin: *const cef_string_t,
            callback: *mut _cef_resolve_callback_t,
        ),
    >,
    pub get_media_router: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ) -> *mut _cef_media_router_t,
    >,
    pub get_website_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t,
        ) -> *mut _cef_value_t,
    >,
    pub set_website_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t,
            value: *mut _cef_value_t,
        ),
    >,
    pub get_content_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t,
        ) -> cef_content_setting_values_t,
    >,
    pub set_content_setting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            requesting_url: *const cef_string_t,
            top_level_url: *const cef_string_t,
            content_type: cef_content_setting_types_t,
            value: cef_content_setting_values_t,
        ),
    >,
    pub set_chrome_color_scheme: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t, variant: cef_color_variant_t, user_color: cef_color_t),
    >,
    pub get_chrome_color_scheme_mode:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> cef_color_variant_t>,
    pub get_chrome_color_scheme_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> cef_color_t>,
    pub get_chrome_color_scheme_variant:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> cef_color_variant_t>,
    pub add_setting_observer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            observer: *mut _cef_setting_observer_t,
        ) -> *mut _cef_registration_t,
    >,
}
#[repr(C)]
pub struct _cef_response_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int>,
    pub get_error: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_errorcode_t>,
    pub set_error: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, error: cef_errorcode_t)>,
    pub get_status: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int>,
    pub set_status:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, status: ::std::os::raw::c_int)>,
    pub get_status_text:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t>,
    pub set_status_text:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, statusText: *const cef_string_t)>,
    pub get_mime_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t>,
    pub set_mime_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, mimeType: *const cef_string_t)>,
    pub get_charset: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t>,
    pub set_charset:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, charset: *const cef_string_t)>,
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, name: *const cef_string_t) -> cef_string_userfree_t,
    >,
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int,
        ),
    >,
    pub get_header_map:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t)>,
    pub set_header_map:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t)>,
    pub get_url: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t>,
    pub set_url: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, url: *const cef_string_t)>,
}
#[repr(C)]
pub struct _cef_urlrequest_t {
    pub base: cef_base_ref_counted_t,
    pub get_request: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_request_t>,
    pub get_client:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_urlrequest_client_t>,
    pub get_request_status:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_urlrequest_status_t>,
    pub get_request_error:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_errorcode_t>,
    pub get_response:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_response_t>,
    pub response_was_cached:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> ::std::os::raw::c_int>,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t)>,
}
pub type cef_urlrequest_t = _cef_urlrequest_t;
unsafe extern "C" {
    pub fn cef_urlrequest_create(
        request: *mut _cef_request_t,
        client: *mut _cef_urlrequest_client_t,
        request_context: *mut _cef_request_context_t,
    ) -> *mut cef_urlrequest_t;
}
#[repr(C)]
pub struct _cef_urlrequest_client_t {
    pub base: cef_base_ref_counted_t,
    pub on_request_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_client_t, request: *mut _cef_urlrequest_t),
    >,
    pub on_upload_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: i64,
            total: i64,
        ),
    >,
    pub on_download_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: i64,
            total: i64,
        ),
    >,
    pub on_download_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            data: *const ::std::os::raw::c_void,
            data_length: usize,
        ),
    >,
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
